1. Group all documents in the collection without specifying a grouping key to count the total number of documents:
COMMAND: db.hotels.aggregate([
        { $group: { _id: null, total_documents: { $sum: 1 } } }
    ]);

2. Group documents by the CATEGORY field to count the number of hotels in each category:
COMMAND: db.hotels.aggregate([
        { $group: { _id: "$category", hotel_count: { $sum: 1 } } }
    ]);

3. Group hotels by CATEGORY and use $push to create an array of all hotel names within each category:
COMMAND: db.hotels.aggregate([
        { $group: { _id: "$category", hotel_names: { $push: "$name" } } }
    ]);

4. Group hotels by CATEGORY and include the entire document for each hotel in the results using $$ROOT:
COMMAND: db.hotels.aggregate([
        { $group: { _id: "$category", hotels: { $push: "$$ROOT" } } }
    ]);

5. Group documents by CATEGORY and count the number of hotels in each category using {$sum: 1}:
COMMAND: db.hotels.aggregate([
        { $group: { _id: "$category", hotel_count: { $sum: 1 } } }
    ]);

6. Determine the maximum, minimum, and average room size (assuming room size can be parsed as a number) across all hotels:
COMMAND: db.hotels.aggregate([
        { $project: { room_size: { $toDouble: "$room_size" } } },
        { $group: { _id: null, max_room_size: { $max: "$room_size" }, min_room_size: { $min: "$room_size" }, avg_room_size: { $avg: "$room_size" } } }
    ]);

7. Group by CATEGORY to find the hotel with the highest RATING in each category:
COMMAND: db.hotels.aggregate([
        { $sort: { rating: -1 } },
        { $group: { _id: "$category", top_rated_hotel: { $first: "$$ROOT" } } }
    ]);

8. Use $project to include the NAME, RATING, and a calculated field showing the difference between FINAL_COST and BASE_COST:
COMMAND: db.hotels.aggregate([
        { $project: { _id: 0, name: 1, rating: 1, cost_difference: { $subtract: ["$final_cost", "$base_cost"] } } }
    ]);

9. Using $unwind, expand the IMAGES array to work with each image URL in separate documents:
COMMAND: db.hotels.aggregate([
        { $unwind: "$images" }
    ]);

10. Use $addFields to add a field in all the documents with the name "onboardStatus" and value as true in the "emp" collection:
COMMAND: db.emp.aggregate([
        { $addFields: { onboardStatus: true } }
    ]);

These queries use various MongoDB aggregation stages to accomplish the required tasks, demonstrating the flexibility and power of MongoDB's aggregation framework.