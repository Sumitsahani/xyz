1.Find hotels ordered by their rating in descending order
COMMAND: db.hotels.aggregate([
        { $sort: { rating: -1 } }
    ]);

2.List hotels sorted by their base cost in ascending order
COMMAND: db.hotels.aggregate([
        { $sort: { base_cost: 1 } }
    ]);

3.Sort hotels by the number of amenities they offer, from most to least
COMMAND: db.hotels.aggregate([
        { $project: { name: 1, amenities: 1, amenities_count: { $size: "$amenities" } } },
        { $sort: { amenities_count: -1 } }
    ]);

4.Order hotels by their final cost in descending order, for those located in Telangana
COMMAND: db.hotels.aggregate([
        { $match: { location: "Telangana" } },
        { $sort: { final_cost: -1 } }
    ]);

5.Find the top 3 highest-rated hotels in Adilabad
COMMAND: db.hotels.aggregate([
        { $match: { location: "Adilabad" } },
        { $sort: { rating: -1 } },
        { $limit: 3 }
    ]);

6.Identify the 2 cheapest hotels offering "WiFi" as an amenity, sorted by base cost
COMMAND: db.hotels.aggregate([
        { $match: { amenities: "WiFi" } },
        { $sort: { base_cost: 1 } },
        { $limit: 2 }
    ]);

7.Find the top 5 most expensive hotels, sorted by their final cost in descending order
COMMAND: db.hotels.aggregate([
        { $sort: { final_cost: -1 } },
        { $limit: 5 }
    ]);

8.Query for the next 5 hotels after skipping the top 5, based on their ratings in descending order
COMMAND: db.hotels.aggregate([
        { $sort: { rating: -1 } },
        { $skip: 5 },
        { $limit: 5 }
    ]);

9.List 3 hotels offering "AC" as an amenity, skipping the first 2 cheapest options, sorted by base cost ascending
COMMAND: db.hotels.aggregate([
        { $match: { amenities: "AC" } },
        { $sort: { base_cost: 1 } },
        { $skip: 2 },
        { $limit: 3 }
    ]);

10.Find 4 hotels categorized as "Good", skipping the top 3 based on final cost in descending order
COMMAND: db.hotels.aggregate([
        { $match: { category: "Good" } },
        { $sort: { final_cost: -1 } },
        { $skip: 3 },
        { $limit: 4 }
    ]);

11.Find hotels that have at least a 4 rating, have been rated by more than 10 users, and offer both "Geyser" and "Daily housekeeping". Include the hotel name, rating, and amenities in the results, sorted by the number of users who rated the hotel in descending order, and exclude the _id field
COMMAND: db.hotels.aggregate([
        { $match: { rating: { $gte: 4 }, rated_by: { $gt: 10 }, amenities: { $all: ["Geyser", "Daily housekeeping"] } } },
        { $sort: { rated_by: -1 } },
        { $project: { _id: 0, name: 1, rating: 1, amenities: 1 } }
    ]);

12.Group hotels by their rating and calculate the average final cost for each rating group. Include only ratings where the average final cost is greater than 800. The result should include the rating and the average final cost, sorted by the average final cost in descending order
COMMAND: db.hotels.aggregate([
        { $group: { _id: "$rating", avg_final_cost: { $avg: "$final_cost" } } },
        { $match: { avg_final_cost: { $gt: 800 } } },
        { $sort: { avg_final_cost: -1 } }
    ]);

13.Find hotels where the final cost is at least 10% higher than the base cost and the rating is at least 3.7. The result should include the hotel name, base cost, final cost, and rating, sorted by final cost in ascending order, and exclude the _id field
COMMAND: db.hotels.aggregate([
        { $match: { $expr: { $gte: [{ $subtract: ["$final_cost", "$base_cost"] }, { $multiply: ["$base_cost", 0.1] }] }, rating: { $gte: 3.7 } } },
        { $project: { _id: 0, name: 1, base_cost: 1, final_cost: 1, rating: 1 } },
        { $sort: { final_cost: 1 } }
    ]);

14.Find the names and final costs of the top 5 highest-rated hotels that offer both "Geyser" and "Power backup". Skip the first 3 results and include only the hotel name and final cost in the output, sorted by rating in descending order
COMMAND: db.hotels.aggregate([
        { $match: { amenities: { $all: ["Geyser", "Power backup"] } } },
        { $sort: { rating: -1 } },
        { $skip: 3 },
        { $limit: 5 },
        { $project: { _id: 0, name: 1, final_cost: 1 } }
    ]);

15.Find all hotels with a rating greater than 3.5, sort by final cost in descending order, then limit to 5 results and skip the first 2. Project the name, address, and rating. Finally, add a field "DISCOUNT" showing the difference between the base cost and final cost
COMMAND: db.hotels.aggregate([
        { $match: { rating: { $gt: 3.5 } } },
        { $sort: { final_cost: -1 } },
        { $skip: 2 },
        { $limit: 5 },
        { $project: { _id: 0, name: 1, address: 1, rating: 1, DISCOUNT: { $subtract: ["$base_cost", "$final_cost"] } } }
    ]);

16.Find hotels that have amenities including both "Free Wifi" and "AC". Sort by base cost in ascending order, limit to 5 results, and skip the first 1. Project the name, address, and base cost. Then, calculate the "COST_PER_SQFT" by dividing the final cost by room size (in sqft)
COMMAND: db.hotels.aggregate([
        { $match: { amenities: { $all: ["Free Wifi", "AC"] } } },
        { $sort: { base_cost: 1 } },
        { $skip: 1 },
        { $limit: 5 },
        { $project: { _id: 0, name: 1, address: 1, base_cost: 1, COST_PER_SQFT: { $divide: ["$final_cost", "$room_size"] } } }
    ]);

17.Find hotels with at least 10 ratings, sort by rating in descending order, limit to 3 results, and skip the first 1. Project the name, address, and rating. Then, calculate the average cost by averaging base cost and final cost
COMMAND: db.hotels.aggregate([
        { $match: { rated_by: { $gte: 10 } } },
        { $sort: { rating: -1 } },
        { $skip: 1 },
        { $limit: 3 },
        { $project: { _id: 0, name: 1, address: 1, rating: 1, avg_cost: { $avg: ["$base_cost", "$final_cost"] } } }
    ]);

18.Find hotels located in "Agra", sort by their rating in ascending order, limit to 5 results, and skip the first 2. Project the name, address, and rating. Add a field "TOTAL_COST" which is the sum of base cost and final cost
COMMAND: db.hotels.aggregate([
        { $match: { location: "Agra" } },
        { $sort: { rating: 1 } },
        { $skip: 2 },
        { $limit: 5 },
        { $project: { _id: 0, name: 1, address: 1, rating: 1, TOTAL_COST: { $sum: ["$base_cost", "$final_cost"] } } }
    ]);

19.Find hotels with a final cost between 500 and 1000, sort by rating

 in descending order, limit to 4 results, and skip the first 1. Project the name, address, and final cost. Then, add a field "COST_DIFFERENCE" which is the absolute difference between base cost and final cost
COMMAND: db.hotels.aggregate([
        { $match: { final_cost: { $gte: 500, $lte: 1000 } } },
        { $sort: { rating: -1 } },
        { $skip: 1 },
        { $limit: 4 },
        { $project: { _id: 0, name: 1, address: 1, final_cost: 1, COST_DIFFERENCE: { $abs: { $subtract: ["$base_cost", "$final_cost"] } } } }
    ]);

20.Find hotels with a room size of exactly "100 sqft" and amenities including "AC" and "TV". Sort by final cost in ascending order, limit to 5 results, and skip the first 2. Project the name, address, and room size. Add a field "COST_PER_RATING_POINT" which is the final cost divided by the rating
COMMAND: db.hotels.aggregate([
        { $match: { room_size: "100 sqft", amenities: { $all: ["AC", "TV"] } } },
        { $sort: { final_cost: 1 } },
        { $skip: 2 },
        { $limit: 5 },
        { $project: { _id: 0, name: 1, address: 1, room_size: 1, COST_PER_RATING_POINT: { $divide: ["$final_cost", "$rating"] } } }
    ]);